@page "/weather"
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<div class="max-w-4xl mx-auto mt-8">
    <h1 class="text-3xl font-bold mb-4">Weather</h1>

    <p class="mb-4">This component demonstrates fetching data from the server.</p>

    @if (forecasts == null)
    {
        <p class="text-gray-600 italic">Loading...</p>
    }
    else
    {
        <div class="overflow-x-auto bg-white shadow-md rounded-lg">
            <table class="min-w-full table-auto">
                <thead class="bg-gray-200">
                <tr>
                    <th class="px-4 py-2 text-left">Date</th>
                    <th class="px-4 py-2 text-left">Temp. (C)</th>
                    <th class="px-4 py-2 text-left">Temp. (F)</th>
                    <th class="px-4 py-2 text-left">Summary</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr class="border-b hover:bg-gray-100">
                        <td class="px-4 py-2">@forecast.Date.ToShortDateString()</td>
                        <td class="px-4 py-2">@forecast.TemperatureC</td>
                        <td class="px-4 py-2">@forecast.TemperatureF</td>
                        <td class="px-4 py-2">@forecast.Summary</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}